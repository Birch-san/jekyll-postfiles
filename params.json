{
  "name": "Jekyll Post Files",
  "tagline": "A Jekyll plugin that copies static files from the _posts to the _site folder",
  "body": "[![Gem Version](https://badge.fury.io/rb/jekyll-postfiles.svg)](https://badge.fury.io/rb/jekyll-postfiles)\r\n[![Gem Downloads](https://img.shields.io/gem/dt/jekyll-postfiles.svg?style=flat)](http://rubygems.org/gems/jekyll-postfiles)\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n## Table of contents\r\n\r\n- [Easing the management of images (and other files) attached to Markdown posts](#easing-the-management-of-images-and-other-files-attached-to-markdown-posts)\r\n  - [The pain of Jekyll's recommended posts assets management](#the-pain-of-jekylls-recommended-posts-assets-management)\r\n  - [There must be another way](#there-must-be-another-way)\r\n  - [Not every assets need this](#not-every-assets-need-this)\r\n- [How does it work?](#how-does-it-work)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Contributing](#contributing)\r\n- [License](#license)\r\n- [Thanks](#thanks)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n## Easing the management of images (and other files) attached to Markdown posts\r\n\r\n### The pain of Jekyll's recommended posts assets management\r\n\r\nJekyll's natural way to deal with static files attached to posts, like images or PDFs, is to put them all in a global `assets/` (or `downloads/`) folder at the site root. Read \"[Including images and resources](https://jekyllrb.com/docs/posts/#including-images-and-resources)\" in Jekyll's documentation.\r\n\r\nYou can of course put files in subfolders of `assets/`, but it will be really cumbersome to manage posts' Markdown files in `_posts/` or a subfolder, and images elsewhere, and then use the good hierarchy in all Markdown image tags.\r\n\r\nImagine you have these files:\r\n\r\n```\r\n_posts/\r\n  2016-06/\r\n    2016-06-09-so-long-cloudflare-and-thanks-for-all-the-fissh.md\r\n…\r\nassets/\r\n  2016-06-09-cloudflare/\r\n    cloudflare-architecture.png\r\n    performance-report-sample.pdf\r\n```\r\n\r\nTo use the image and PDF files in the post's Markdown, you will have to write this:\r\n\r\n```markdown\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\r\ntempor incididunt ut labore et dolore magna aliqua.\r\n\r\n![Cloudflare architecture](/assets/2016-06-09-cloudflare/cloudflare-architecture.png)\r\n\r\nUt enim ad minim veniam,\r\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\nconsequat.\r\n\r\nHere is [an example of performance report](/assets/2016-06-09-cloudflare/performance-report-sample.pdf).\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\r\ntempor incididunt ut labore et dolore magna aliqua.\r\n```\r\n\r\nPainful to write.\r\n\r\nImagine you want to change the post's publication date, or one of the file names?\r\n\r\nPainful to update.\r\n\r\nWhat if you want to put new WIP Markdown files in `_drafts/`, and the attached assets somewhere in a way they won't be copied to the destination `_site/` folder next time you build the site? You can't put the files in the `assets/` folder, so when you will publish the draft, you will have to change the assets location in the Markdown file.\r\n\r\nPainful, and prone to errors.\r\n\r\nAnd what about previewing the content while editing? If you use an editor like [MacDown](http://macdown.uranusjr.com/) with live preview, how will it find the actual path to the images? What means `/assets/…` for the editor?\r\n\r\nPainful to preview.\r\n\r\n### There must be another way\r\n\r\nWhat if instead, you could have the files stored like that:\r\n\r\n```\r\n_posts/\r\n  2016-06-09-cloudflare/\r\n    2016-06-09-so-long-cloudflare-and-thanks-for-all-the-fissh.md\r\n    cloudflare-architecture.png\r\n    performance-report-sample.pdf\r\n```\r\n\r\nAnd if you could write your Markdown like this:\r\n\r\n```markdown\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\r\ntempor incididunt ut labore et dolore magna aliqua.\r\n\r\n![Cloudflare architecture](cloudflare-architecture.png)\r\n\r\nUt enim ad minim veniam,\r\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\nconsequat.\r\n\r\nHere is [an example of performance report](performance-report-sample.pdf).\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\r\ntempor incididunt ut labore et dolore magna aliqua.\r\n```\r\n\r\nMuch easier!\r\n\r\n- Easy to store, everything is in one single folder.\r\n- Easy to write, no path to add to file links\r\n- Easy to update\r\n- Easy to move from `_drafts/` to `_posts/`, without anything to change in the Mardown content\r\n- Easy to edit in any editor with live preview\r\n\r\n### Not every assets need this\r\n\r\n[Some Jekyll users will try to convince you](http://stackoverflow.com/a/10366173/717195) it's a bad idea, because it means the asset is tightly linked to the post.\r\n\r\nIn my own experience, 95% of assets, at least, are used in one single post. And this is pretty common to find such requests from users of other static generators, like [Hugo](https://github.com/spf13/hugo/issues/147) ([fixed in May 2015](https://github.com/spf13/hugo/issues/147#issuecomment-104067783)), [Nikola](https://github.com/getnikola/nikola/issues/2266) ([already there, but not obvious or user friendly](https://github.com/getnikola/nikola/issues/2266#issuecomment-189211387)), [Octopress](http://stackoverflow.com/questions/17052468/insert-local-image-into-a-blog-post-with-octopress), etc.\r\n\r\nBut it's true this might not be ideal for all assets (the remaining 5%), so you can of course continue using full assets paths with `/assets/…` to have a few assets shared by several posts.\r\n\r\n## How does it work?\r\n\r\nThis plugin takes any file that is in posts folders, and copy them to the folder in which the post HTML page will be created.\r\n\r\nLet's say you have these files:\r\n\r\n```\r\n_posts/\r\n  2016-06-09-cloudflare/\r\n    2016-06-09-so-long-cloudflare-and-thanks-for-all-the-fissh.md\r\n    cloudflare-architecture.png\r\n    performance-report-sample.pdf\r\n```\r\n\r\nAnd your Jekyll settings for permalinks are these:\r\n\r\n```yaml\r\n# Permalinks\r\npermalink: /:year/:month/:day/:title/\r\n```\r\n\r\nJekyll with this plugin will generate the site content like this:\r\n\r\n```\r\n2016/\r\n  06/\r\n    09/\r\n      so-long-cloudflare-and-thanks-for-all-the-fissh/\r\n        index.html\r\n        cloudflare-logo.png\r\n        performance-report-sample.pdf\r\n```\r\n\r\nIf you change your Jekyll settings for permalinks like these:\r\n\r\n```yaml\r\n# Permalinks\r\npermalink: /:year/:month/:day/:title.html\r\n```\r\n\r\nJekyll with this plugin will generate the site content like this:\r\n\r\n```\r\n2016/\r\n  06/\r\n    09/\r\n      so-long-cloudflare-and-thanks-for-all-the-fissh.html\r\n      cloudflare-logo.png\r\n      performance-report-sample.pdf\r\n```\r\n\r\nHandy, isn't it?\r\n\r\n## Installation\r\n\r\nAdd this line to your `Gemfile`:\r\n\r\n```ruby\r\ngem 'jekyll-postfiles'\r\n```\r\n\r\nExecute this:\r\n\r\n```shell\r\n$ bundle\r\n```\r\n\r\nAnd add this line to your `_config.yml`:\r\n\r\n```yaml\r\ngems:\r\n  - jekyll-postfiles\r\n```\r\n\r\n## Usage\r\n\r\nYou don't have anything to do.\r\n\r\nJust put the images (and PDFs, etc.) in the same folder as your Markdown files, and use the standard Markdown image syntax, without any path.\r\n\r\n## Contributing\r\n\r\nBug reports and pull requests are welcome on GitHub at [https://github.com/nhoizey/jekyll-postfiles](https://github.com/nhoizey/jekyll-postfiles)\r\n\r\n## License\r\n\r\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\r\n\r\n## Thanks\r\n\r\nInspired by [this old Gist](https://gist.github.com/kevinoid/3131752) by [@kevinoid](https://github.com/kevinoid/).\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}